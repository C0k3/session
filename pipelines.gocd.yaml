pipelines:
  authorizer:
    group: lambda
    label_template: "${authorizer[:8]}"
    environment_variables:
      FUNCTION_NAME: authorizer
    materials:
      authorizer:
        git: https://github.com/C0k3/session
        branch: development
        whitelist:
        - lambda_functions/authorizer/**/*.*
        - "*.js"
        - "*.json"
        - "*.opts"
        - "*.yml"
        - "*.yaml"
    stages: &functionStages
      - unit-testing:
          clean_workspace: true
          environment_variables:
            NODE_ENV: development
          artifacts:
          - test:
              source: test-results.xml
              destination: test-reports/
          tasks:
          - script: |
              npm install
              node_modules/.bin/gulp test -f $FUNCTION_NAME
      - lint:
          clean_workspace: true
          environment_variables:
            NODE_ENV: development
          artifacts:
          - build:
              source: jshint.html
          tabs:
            lint: jshint.html
          tasks:
          - script: |
              touch jshint.html
              npm install
              node_modules/.bin/gulp lint -f $FUNCTION_NAME
              true
      - code-coverage:
          clean_workspace: true
          environment_variables:
            NODE_ENV: test
            COV_LINES: 1
            COV_FUNCTIONS: 1
            COV_BRANCHES: 1
          artifacts:
          - build:
              source: coverage
          tabs:
            code-coverage: coverage/index.html
          tasks:
          - script: |
              npm install
              node_modules/.bin/nyc --reporter html node_modules/.bin/gulp test -f $FUNCTION_NAME
              true
          - script: |
              node_modules/.bin/nyc check-coverage --lines $COV_LINES --functions $COV_FUNCTIONS --branches $COV_BRANCHES
      - test-deploy:
          clean_workspace: true
          tasks:
          - script: |
              source /etc/gitPassword
              git checkout test-deploy
              git rebase --onto development origin
              git push -f https://$GIT_USERNAME:$GIT_PASSWORD@github.com/C0k3/session 2> /dev/null
      - deploy-dev:
          clean_workspace: true
          tasks:
          - script: |
              npm install . --production
              sls deploy function -f $FUNCTION_NAME --stage dev
      - deploy-test:
          clean_workspace: true
          approval:
            type: manual          
          tasks:
          - script: |
              git checkout test-deploy
              git pull
              npm install . --production
              sls deploy function -f $FUNCTION_NAME --stage test
  getSession:
    group: lambda
    label_template: "${getSession[:8]}"
    environment_variables:
      FUNCTION_NAME: getSession
    materials:
      getSession:
        git: https://github.com/C0k3/session
        branch: development
        whitelist:
        - lambda_functions/getSession/**/*.*
        - "*.js"
        - "*.json"
        - "*.opts"
        - "*.yml"
        - "*.yaml"
    stages: *stages
  createUser:
    group: lambda
    label_template: "${createUser[:8]}"
    environment_variables:
      FUNCTION_NAME: createUser
    materials:
      createUser:
        git: https://github.com/C0k3/session
        branch: development
        whitelist:
        - lambda_functions/createUser/**/*.*
        - "*.js"
        - "*.json"
        - "*.opts"
        - "*.yml"
        - "*.yaml"
    stages: *functionStages
